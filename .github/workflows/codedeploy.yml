name: docker-build-push-codedeploy

on:
  push:
    branches:
      - master
    paths:
      - 'strapi-app/**'

env:
  AWS_REGION: us-east-2
  IMAGE_TAG: ${{ github.sha }}
  ECR_REPO_NAME: strapi-artifacts
  S3_BUCKET: strapi-codedeploy-bucket752
  CODEDEPLOY_APP: strapi-codedeploy
  CODEDEPLOY_GROUP: strapi-deploy-group

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    outputs:
      image_uri: ${{ steps.build.outputs.image_uri }}
      

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push Docker image to ECR
        id: build
        working-directory: strapi
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          IMAGE_URI=${ECR_REGISTRY}/${ECR_REPO_NAME}:${IMAGE_TAG}
          docker build -t $IMAGE_URI .
          docker push $IMAGE_URI
          echo "image_uri=$IMAGE_URI" >> $GITHUB_OUTPUT
   
      - name: Update Docker Image in ec2.tf
        run: |
          FILE="Terraform-ECS/ECS-Cluster/ecs-task-definition.tf"
          sed -i "11s|image = \".*\"|image = \"${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}\"|" "$FILE"
          echo "Updated ECS task image to ${{ env.IMAGE_REPO }}:${{ env.IMAGE_TAG }}"

      - name: Set up SSH for Git Push
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

      - name: Commit and push changes
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
          git add Terraform-ECS/ECS-Cluster/ecs-task-definition.tf
          git commit -m "Updated Docker image In Ec2 User Script to ${{ env.IMAGE_TAG }}"
          git push git@github.com:${{ github.repository }}.git HEAD:master
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push

    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.8.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}

      - name: Terraform Init
        working-directory: Deployment_infra
        run: terraform init

      - name: Terraform Apply
        working-directory: Deployment_infra
        run: |
          terraform apply -auto-approve || { echo "Terraform apply failed"; exit 1; }

      - name: Generate AppSpec and Upload to S3
        working-directory: Deployment_infra
        run: |
          TASK_ARN=$(terraform output -raw latest_task_definition_arn)
          echo "Task ARN from terraform: $TASK_ARN"
          if [ -z "$TASK_ARN" ]; then
            echo "Error: TASK_ARN is empty!"
            exit 1
          fi

          mkdir -p appspec
          cat <<EOF > appspec/appspec.yaml
          version: 1
          Resources:
            - TargetService:
                Type: AWS::ECS::Service
                Properties:
                  TaskDefinition: $TASK_ARN
                  LoadBalancerInfo:
                    ContainerName: "strapi"
                    ContainerPort: 1337
          EOF

          echo "Generated AppSpec content:"
          cat appspec/appspec.yaml

          aws s3 cp appspec/appspec.yaml s3://${S3_BUCKET}/appspec-${{ github.sha }}.yaml || { echo "Failed to upload AppSpec to S3"; exit 1; }

      - name: Trigger CodeDeploy Deployment
        run: |
          aws deploy create-deployment \
            --application-name $CODEDEPLOY_APP \
            --deployment-group-name $CODEDEPLOY_GROUP \
            --s3-location bucket=$S3_BUCKET,bundleType=YAML,key=appspec-${{ github.sha }}.yaml \
            --description "Deploying $IMAGE_TAG" || { echo "CodeDeploy deployment failed"; exit 1; }
